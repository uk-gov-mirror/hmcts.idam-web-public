#!groovy

properties([
//    pipelineTriggers([cron('10 21 * * *')]),

    parameters([
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
        string(name: 'URL_TO_TEST', defaultValue: 'https://idam-web-public.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
        string(name: 'API_URL_TO_TEST', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The API URL you want to run these tests against '),
        booleanParam(name: 'skipSecurityScanTests', defaultValue: false, description: 'Runs on aat envt only, tick the checkbox for skip'),
        booleanParam(name: 'enableNonAATSecurityScan', defaultValue: false, description: 'Enables security scan on non-aat environments (won\'t honour the ZapScanner exclusions list atm)'),
        booleanParam(name: 'skipMutationTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipFullFunctionalTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'skipCrossBrowserTests', defaultValue: false, description: 'Tick the checkbox for skip'),
        booleanParam(name: 'USE_PROXY_SERVER', defaultValue: false, description: 'use proxy server for tests, required (true) for sandbox envt only'),
    ])
])

@Library("Infrastructure") _

def type = "java"

def product = "idam"

def component = "web-public"

def secrets = [
    "idam-idam-${params.ENVIRONMENT}": [
        secret('smoke-test-user-username', 'SMOKE_TEST_USER_USERNAME'),
        secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
        secret('notify-api-key', 'NOTIFY_API_KEY'),
        secret('EJUDICIARY-TEST-USER-PASSWORD', 'EJUDICIARY_TEST_USER_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.IDAMAPI = params.API_URL_TO_TEST

    if (params.USE_PROXY_SERVER) {
        env.PROXY_SERVER = 'http://proxyout.reform.hmcts.net:8080'
    }

    loadVaultSecrets(secrets)

    if ((params.ENVIRONMENT == 'aat' || params.enableNonAATSecurityScan) && !params.skipSecurityScanTests) {
        enableSecurityScan()
    }

    if (!params.skipMutationTests) {
        enableMutationTest()
    }

    if (!params.skipCrossBrowserTests) {
        enableCrossBrowserTest()
        after('crossBrowserTest') {
            try {
                withSauceConnect("reform_tunnel") {
                    sh "./gradlew functionalSauce"
                    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
                }
            }
            finally {
                steps.saucePublisher()
            }
        }
    }

    if (!params.skipFullFunctionalTests) {
        enableFullFunctionalTest(200)
        after('fullFunctionalTest') {
            publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "output",
                reportFiles          : "idam-web-public-e2e-result.html",
                reportName           : "IDAM Web Public E2E functional tests result"
            ]
        }
    }

}