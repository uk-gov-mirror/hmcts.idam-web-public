{
  "stats": {
    "suites": 1,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-01T17:41:01.994Z",
    "end": "2021-02-01T17:41:02.278Z",
    "duration": 284,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 2,
    "hasOther": true,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "f11e00ae-652f-43b6-94d0-0f258f6f31f5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "91a7b68a-42da-4b97-9eca-a22573df8796",
          "title": "Users can create account, sign in and reset password",
          "fullFile": "/Users/shravanmechineni/Projects/MOJ/git/idam-web-public/src/test/js/cross_browser_test.js",
          "file": "/src/test/js/cross_browser_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite for \"@crossbrowser Idam Web public cross browser tests\"",
              "fullTitle": "Users can create account, sign in and reset password \"before all\" hook: codeceptjs.beforeSuite for \"@crossbrowser Idam Web public cross browser tests\"",
              "timedOut": false,
              "duration": 250,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {
                "message": "Error: Could not start Sauce Connect. Exit code 1 signal: null",
                "estack": "Error: Could not start Sauce Connect. Exit code 1 signal: null\n    at ChildProcess.<anonymous> (node_modules/sauce-connect-launcher-update/lib/sauce-connect-launcher.js:566:12)\n    at ChildProcess.EventEmitter.emit (domain.js:486:12)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12)",
                "diff": null
              },
              "uuid": "a72f2629-f590-46de-8886-99e2c55bd647",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook: BeforeSuite",
              "fullTitle": "Users can create account, sign in and reset password \"before all\" hook: BeforeSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const errHandler = (err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  event.emit(event.test.failed, suite, err);\n  if (hookName === 'after') event.emit(event.test.after, suite);\n  if (hookName === 'afterSuite') event.emit(event.suite.after, suite);\n  recorder.add(() => done(err));\n};\nrecorder.errHandler((err) => {\n  errHandler(err);\n});\nif (!fn) throw new Error('fn is not defined');\nevent.emit(event.hook.started, suite);\nif (!recorder.isRunning()) {\n  recorder.start();\n  recorder.errHandler((err) => {\n    errHandler(err);\n  });\n}\nthis.test.body = fn.toString();\nif (isAsyncFunction(fn)) {\n  fn.call(this, getInjectedArguments(fn)).then(() => {\n    recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n    recorder.add(`finish ${hookName} hook`, () => done());\n    recorder.catch();\n  }).catch((e) => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      errHandler(err);\n    });\n    recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, e));\n  });\n  return;\n}\ntry {\n  fn.call(this, getInjectedArguments(fn));\n  recorder.add('fire hook.passed', () => event.emit(event.hook.passed, suite));\n  recorder.add(`finish ${hookName} hook`, () => done());\n  recorder.catch();\n} catch (err) {\n  recorder.throw(err);\n  recorder.catch((e) => {\n    const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n    errHandler(err);\n  });\n  recorder.add('fire hook.failed', () => event.emit(event.hook.failed, suite, err));\n}",
              "err": {},
              "uuid": "21781b44-98e2-4890-8a99-0ea813f7d4cf",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before",
              "fullTitle": "Users can create account, sign in and reset password \"before each\" hook: codeceptjs.before",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "16a3c63d-4b34-4e9c-90e3-f4935fd80bd3",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: AfterSuite for \"@crossbrowser Idam Web public cross browser tests\"",
              "fullTitle": "Users can create account, sign in and reset password \"after all\" hook: AfterSuite for \"@crossbrowser Idam Web public cross browser tests\"",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "I }) => {\n     return I.deleteAllTestData(randomData.TEST_BASE_PREFIX)",
              "err": {
                "message": "Error: Could not start Sauce Connect. Exit code 1 signal: null",
                "estack": "Error: Could not start Sauce Connect. Exit code 1 signal: null\n    at ChildProcess.<anonymous> (node_modules/sauce-connect-launcher-update/lib/sauce-connect-launcher.js:566:12)\n    at ChildProcess.EventEmitter.emit (domain.js:486:12)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:276:12)",
                "diff": null
              },
              "uuid": "5969385b-f1d4-47ea-b15e-1ec93e86017b",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite",
              "fullTitle": "Users can create account, sign in and reset password \"after all\" hook: codeceptjs.afterSuite",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "386b0c52-a15f-43ff-8f57-04dece039af5",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs",
              "fullTitle": "Users can create account, sign in and reset password \"after each\" hook: finalize codeceptjs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "18924544-cb87-4412-bf07-4e57f0d08147",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "@crossbrowser Idam Web public cross browser tests",
              "fullTitle": "Users can create account, sign in and reset password: @crossbrowser Idam Web public cross browser tests",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    const loginPage = `${TestData.WEB_PUBLIC_URL}/login?redirect_uri=${TestData.SERVICE_REDIRECT_URI}&client_id=${serviceName}`;\n    // create account\n    I.amOnPage(selfRegUrl);\n    I.waitInUrl('users/selfRegister', 180);\n    I.waitForText('Create an account or sign in', 20, 'h1');\n    I.see('Create an account');\n    I.fillField('firstName', randomUserFirstName);\n    I.fillField('lastName', randomUserLastName);\n    I.fillField('email', citizenEmail);\n    I.click(\"Continue\");\n    I.waitForText('Check your email', 20, 'h1');\n    const userActivationUrl = await I.extractUrlFromNotifyEmail(citizenEmail);\n    I.amOnPage(userActivationUrl);\n    I.waitForText('Create a password', 20, 'h1');\n    I.seeTitleEquals('User Activation - HMCTS Access');\n    I.fillField('#password1', TestData.PASSWORD);\n    I.fillField('#password2', TestData.PASSWORD);\n    I.click('Continue');\n    I.waitForText('Account created', 20, 'h1');\n    // login\n    I.amOnPage(loginPage);\n    I.waitForText('Sign in', 20, 'h1');\n    I.fillField('#username', citizenEmail);\n    I.fillField('#password', TestData.PASSWORD);\n    I.click('Sign in');\n    I.wait(5);\n    I.dontSee('Sign in');\n    //Reset password\n    I.amOnPage(loginPage);\n    I.waitForText('Sign in or create an account', 20, 'h1');\n    I.click('Forgotten password?');\n    I.waitForText('Reset your password', 20, 'h1');\n    I.fillField('#email', citizenEmail);\n    I.click('Submit');\n    I.waitForText('Check your email', 20, 'h1');\n    const resetPasswordUrl = await I.extractUrlFromNotifyEmail(citizenEmail);\n    I.amOnPage(resetPasswordUrl);\n    I.waitForText('Create a new password', 20, 'h1');\n    I.seeTitleEquals('Reset Password - HMCTS Access');\n    I.fillField('#password1', 'Passw0rd1234');\n    I.fillField('#password2', 'Passw0rd1234');\n    I.click('Continue');\n    I.waitForText('Your password has been changed', 20, 'h1');\n    I.see('You can now sign in with your new password.');",
              "err": {},
              "uuid": "322a0788-933e-4279-bbbf-56bf70b3872a",
              "parentUUID": "91a7b68a-42da-4b97-9eca-a22573df8796",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "322a0788-933e-4279-bbbf-56bf70b3872a"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": {},
      "version": "5.1.0"
    }
  }
}